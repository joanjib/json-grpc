// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arexservices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArexServicesClient is the client API for ArexServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArexServicesClient interface {
	// Issuer API
	AddClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Id, error)
	RemoveClient(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListClients(ctx context.Context, in *IsInvestor, opts ...grpc.CallOption) (ArexServices_ListClientsClient, error)
	// SellOrder API & Invoices
	// Starts an invoice financing process with a SellOrder + Invoice. Returns the id of the SellOrder.
	StartInvoiceFinancing(ctx context.Context, in *InvoiceFinancing, opts ...grpc.CallOption) (*Id, error)
	// allows listing of the SellOrders to Investors.
	ListSellOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListSellOrdersClient, error)
	ListInvoices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListInvoicesClient, error)
	// Bidding API: process done into the Ledger.
	// Add a Bid in the Ledger and returns the Id of the Ledger entry
	AddBid(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Id, error)
	RemoveBid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	// list all bids in all states
	ListBids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListBidsClient, error)
}

type arexServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewArexServicesClient(cc grpc.ClientConnInterface) ArexServicesClient {
	return &arexServicesClient{cc}
}

func (c *arexServicesClient) AddClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/arexservices.ArexServices/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arexServicesClient) RemoveClient(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/arexservices.ArexServices/RemoveClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arexServicesClient) ListClients(ctx context.Context, in *IsInvestor, opts ...grpc.CallOption) (ArexServices_ListClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArexServices_ServiceDesc.Streams[0], "/arexservices.ArexServices/ListClients", opts...)
	if err != nil {
		return nil, err
	}
	x := &arexServicesListClientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArexServices_ListClientsClient interface {
	Recv() (*Client, error)
	grpc.ClientStream
}

type arexServicesListClientsClient struct {
	grpc.ClientStream
}

func (x *arexServicesListClientsClient) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *arexServicesClient) StartInvoiceFinancing(ctx context.Context, in *InvoiceFinancing, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/arexservices.ArexServices/StartInvoiceFinancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arexServicesClient) ListSellOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListSellOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArexServices_ServiceDesc.Streams[1], "/arexservices.ArexServices/ListSellOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &arexServicesListSellOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArexServices_ListSellOrdersClient interface {
	Recv() (*SellOrder, error)
	grpc.ClientStream
}

type arexServicesListSellOrdersClient struct {
	grpc.ClientStream
}

func (x *arexServicesListSellOrdersClient) Recv() (*SellOrder, error) {
	m := new(SellOrder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *arexServicesClient) ListInvoices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListInvoicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArexServices_ServiceDesc.Streams[2], "/arexservices.ArexServices/ListInvoices", opts...)
	if err != nil {
		return nil, err
	}
	x := &arexServicesListInvoicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArexServices_ListInvoicesClient interface {
	Recv() (*Invoice, error)
	grpc.ClientStream
}

type arexServicesListInvoicesClient struct {
	grpc.ClientStream
}

func (x *arexServicesListInvoicesClient) Recv() (*Invoice, error) {
	m := new(Invoice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *arexServicesClient) AddBid(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/arexservices.ArexServices/AddBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arexServicesClient) RemoveBid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/arexservices.ArexServices/RemoveBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arexServicesClient) ListBids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ArexServices_ListBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArexServices_ServiceDesc.Streams[3], "/arexservices.ArexServices/ListBids", opts...)
	if err != nil {
		return nil, err
	}
	x := &arexServicesListBidsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArexServices_ListBidsClient interface {
	Recv() (*Ledger, error)
	grpc.ClientStream
}

type arexServicesListBidsClient struct {
	grpc.ClientStream
}

func (x *arexServicesListBidsClient) Recv() (*Ledger, error) {
	m := new(Ledger)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArexServicesServer is the server API for ArexServices service.
// All implementations must embed UnimplementedArexServicesServer
// for forward compatibility
type ArexServicesServer interface {
	// Issuer API
	AddClient(context.Context, *Client) (*Id, error)
	RemoveClient(context.Context, *Id) (*Empty, error)
	ListClients(*IsInvestor, ArexServices_ListClientsServer) error
	// SellOrder API & Invoices
	// Starts an invoice financing process with a SellOrder + Invoice. Returns the id of the SellOrder.
	StartInvoiceFinancing(context.Context, *InvoiceFinancing) (*Id, error)
	// allows listing of the SellOrders to Investors.
	ListSellOrders(*Empty, ArexServices_ListSellOrdersServer) error
	ListInvoices(*Empty, ArexServices_ListInvoicesServer) error
	// Bidding API: process done into the Ledger.
	// Add a Bid in the Ledger and returns the Id of the Ledger entry
	AddBid(context.Context, *Ledger) (*Id, error)
	RemoveBid(context.Context, *Id) (*Empty, error)
	// list all bids in all states
	ListBids(*Empty, ArexServices_ListBidsServer) error
	mustEmbedUnimplementedArexServicesServer()
}

// UnimplementedArexServicesServer must be embedded to have forward compatible implementations.
type UnimplementedArexServicesServer struct {
}

func (UnimplementedArexServicesServer) AddClient(context.Context, *Client) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedArexServicesServer) RemoveClient(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedArexServicesServer) ListClients(*IsInvestor, ArexServices_ListClientsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedArexServicesServer) StartInvoiceFinancing(context.Context, *InvoiceFinancing) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInvoiceFinancing not implemented")
}
func (UnimplementedArexServicesServer) ListSellOrders(*Empty, ArexServices_ListSellOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSellOrders not implemented")
}
func (UnimplementedArexServicesServer) ListInvoices(*Empty, ArexServices_ListInvoicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedArexServicesServer) AddBid(context.Context, *Ledger) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBid not implemented")
}
func (UnimplementedArexServicesServer) RemoveBid(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBid not implemented")
}
func (UnimplementedArexServicesServer) ListBids(*Empty, ArexServices_ListBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBids not implemented")
}
func (UnimplementedArexServicesServer) mustEmbedUnimplementedArexServicesServer() {}

// UnsafeArexServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArexServicesServer will
// result in compilation errors.
type UnsafeArexServicesServer interface {
	mustEmbedUnimplementedArexServicesServer()
}

func RegisterArexServicesServer(s grpc.ServiceRegistrar, srv ArexServicesServer) {
	s.RegisterService(&ArexServices_ServiceDesc, srv)
}

func _ArexServices_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArexServicesServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arexservices.ArexServices/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArexServicesServer).AddClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArexServices_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArexServicesServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arexservices.ArexServices/RemoveClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArexServicesServer).RemoveClient(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArexServices_ListClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IsInvestor)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArexServicesServer).ListClients(m, &arexServicesListClientsServer{stream})
}

type ArexServices_ListClientsServer interface {
	Send(*Client) error
	grpc.ServerStream
}

type arexServicesListClientsServer struct {
	grpc.ServerStream
}

func (x *arexServicesListClientsServer) Send(m *Client) error {
	return x.ServerStream.SendMsg(m)
}

func _ArexServices_StartInvoiceFinancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceFinancing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArexServicesServer).StartInvoiceFinancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arexservices.ArexServices/StartInvoiceFinancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArexServicesServer).StartInvoiceFinancing(ctx, req.(*InvoiceFinancing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArexServices_ListSellOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArexServicesServer).ListSellOrders(m, &arexServicesListSellOrdersServer{stream})
}

type ArexServices_ListSellOrdersServer interface {
	Send(*SellOrder) error
	grpc.ServerStream
}

type arexServicesListSellOrdersServer struct {
	grpc.ServerStream
}

func (x *arexServicesListSellOrdersServer) Send(m *SellOrder) error {
	return x.ServerStream.SendMsg(m)
}

func _ArexServices_ListInvoices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArexServicesServer).ListInvoices(m, &arexServicesListInvoicesServer{stream})
}

type ArexServices_ListInvoicesServer interface {
	Send(*Invoice) error
	grpc.ServerStream
}

type arexServicesListInvoicesServer struct {
	grpc.ServerStream
}

func (x *arexServicesListInvoicesServer) Send(m *Invoice) error {
	return x.ServerStream.SendMsg(m)
}

func _ArexServices_AddBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ledger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArexServicesServer).AddBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arexservices.ArexServices/AddBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArexServicesServer).AddBid(ctx, req.(*Ledger))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArexServices_RemoveBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArexServicesServer).RemoveBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arexservices.ArexServices/RemoveBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArexServicesServer).RemoveBid(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArexServices_ListBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArexServicesServer).ListBids(m, &arexServicesListBidsServer{stream})
}

type ArexServices_ListBidsServer interface {
	Send(*Ledger) error
	grpc.ServerStream
}

type arexServicesListBidsServer struct {
	grpc.ServerStream
}

func (x *arexServicesListBidsServer) Send(m *Ledger) error {
	return x.ServerStream.SendMsg(m)
}

// ArexServices_ServiceDesc is the grpc.ServiceDesc for ArexServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArexServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arexservices.ArexServices",
	HandlerType: (*ArexServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _ArexServices_AddClient_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _ArexServices_RemoveClient_Handler,
		},
		{
			MethodName: "StartInvoiceFinancing",
			Handler:    _ArexServices_StartInvoiceFinancing_Handler,
		},
		{
			MethodName: "AddBid",
			Handler:    _ArexServices_AddBid_Handler,
		},
		{
			MethodName: "RemoveBid",
			Handler:    _ArexServices_RemoveBid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListClients",
			Handler:       _ArexServices_ListClients_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSellOrders",
			Handler:       _ArexServices_ListSellOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoices",
			Handler:       _ArexServices_ListInvoices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBids",
			Handler:       _ArexServices_ListBids_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arexservices.proto",
}
