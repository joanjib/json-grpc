syntax = "proto3";

package arexservices;

option go_package = ".;arexservices";

message Empty {

}

message Id {
	int64 				id					= 1;
}

message Issuer {
	string 				fiscal_identity 	= 1;
	string 				name				= 2;
	string 				surname				= 3;
	string 				balance				= 4; 	// string representation of a numeric value in postgresql
}

message Investor {
	string 				fiscal_identity 	= 1;
	string 				name				= 2;
	string 				surname				= 3;
	string 				balance				= 4; 	// string representation of a numeric value in postgresql
}
	
message Invoice {
	string 				fiscal_identity 	= 1;
	int64				issuer_id			= 2;
	string				amount				= 3; 	// string representation of a numeric value in postgresql
	string 				creation_time		= 4;
	string        		state				= 5;
}

message SellOrder {
	int64 				invoice_id			= 1;
	string				size				= 2;
	string				amount 				= 3; 	// string representation of a numeric value in postgresql
	string 				creation_time		= 4;
	string		 		state				= 5;
}

message Ledger	{
	int64				investor_id			= 1;
	int64				sell_order_id		= 2;
	string				size				= 3; 	// string representation of a numeric value in postgresql
	string				amount 				= 4; 	// string representation of a numeric value in postgresql
	string				balance 			= 5; 	// string representation of a numeric value in postgresql
	string				discount			= 6; 	// string representation of a percentage (ex "44.55")
	string 				creation_time		= 7;
	string				expected_profit		= 8;
	bool				adjusted			= 9;	// true: means: it's not the original big, it was adjusted. False otherwise
}

message InvoiceFinancing {
	SellOrder 			sell_order			= 1;
	Invoice 			invoice				= 2;
}

service ArexServices {
	
	// Issuer API
	rpc AddIssuer		(Issuer) 		returns (Id)	 			{}
	rpc RemoveIssuer	(Id)			returns (Empty)				{}
	rpc ListIssuers		(Empty)			returns (stream Issuer) 	{}

	// Investor API
	rpc AddInvestor		(Investor) 		returns (Id)	 			{}
	rpc RemoveInvestor	(Id)			returns (Empty)				{}
	rpc ListInvestors	(Empty)			returns (stream Investor) 	{}
	

	// SellOrder API & Invoices
	// Starts an invoice financing process with a SellOrder + Invoice. Returns the id of the SellOrder.
	rpc StartInvoiceFinancing (InvoiceFinancing) 	returns (Id)	{}
	// for any reason the issuer wants to reverse the financing process, he uses this procedure
	rpc ReverseInvoiceFinancing (Id) 				returns (Empty)	{}
	// allows listing of the SellOrders to Investors.
	rpc ListSellOrders	(Empty)			returns (stream SellOrder) 	{}
	rpc ListInvoices	(Empty)			returns (stream Invoice) 	{}

	// Bidding API: process done into the Ledger.
	// Add a Bid in the Ledger and returns the Id of the Ledger entry 
	rpc AddBid			(Ledger)		returns (Id)				{}
	rpc RemoveBid		(Id)			returns (Empty)				{}
	// list all bids in all states
	rpc ListBids		(Empty)			returns (stream Ledger)		{}

}
